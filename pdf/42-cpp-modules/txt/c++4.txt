C++ Module 04: Understanding Polymorphism, Abstract Classes, and Interfaces
This module builds upon your knowledge of inheritance from Module 03 and introduces key object-oriented programming concepts that enable flexible and extensible code design.
Key Concepts Covered
Exercise 00: Polymorphism

Implementation of a simple class hierarchy with an Animal base class
Derived classes Dog and Cat that inherit and override behavior
Virtual functions to enable runtime polymorphism
Demonstration of proper vs. improper polymorphism using WrongAnimal and WrongCat

Exercise 01: Memory Management with Inheritance

Deep vs. shallow copying with pointer members
Proper memory allocation and deallocation in a class hierarchy
Implementation of a Brain class that Dog and Cat objects own
Creating arrays of polymorphic objects
Ensuring no memory leaks in polymorphic structures

Exercise 02: Abstract Classes

Converting a concrete base class to an abstract class
Pure virtual functions that derived classes must implement
Understanding when and why to make classes non-instantiable
Maintaining polymorphic behavior with abstract base classes

Exercise 03: Interfaces and Design Patterns

Implementing interface-like behavior using pure abstract classes
Multiple inheritance for the DiamondTrap class
Factory pattern with the MateriaSource class
Component-based design with the inventory system
Complex object relationships and memory management

Implementation Requirements
All implementations should follow these key requirements:

Orthodox Canonical Form for all classes (unless specified otherwise)
Proper construction/destruction order in inheritance chains
Memory leak avoidance with proper resource management
Comprehensive testing for all functionality
Following C++98 standard
Distinguishable messages for constructors/destructors of each class

This module provides a solid foundation in key OOP techniques that enhance code flexibility and reusability while maintaining proper resource management, particularly valuable for game development and systems with complex object relationships.
